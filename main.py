'''


El objetivo de este proyecto es desarrollar un sistema de administraci√≥n para un parqueadero que permita gestionar de manera eficiente la entrada y salida de veh√≠culos (carros y motos). El sistema debe registrar la informaci√≥n relevante de los veh√≠culos, como el tipo de veh√≠culo (carro o moto), la placa, y las horas de entrada y salida. Este proyecto tiene como fin consolidar los conocimientos adquiridos en el curso, utilizando herramientas y conceptos de programaci√≥n en Python, tales como listas, diccionarios, y tuplas.

Requisitos del Programa:

1.	Estructura de Datos:
o	Utiliza listas para almacenar los veh√≠culos estacionados. Cada veh√≠culo debe ser representado como un diccionario con los siguientes campos:
ÔÇß	Placa (cadena de texto)
ÔÇß	Tipo de veh√≠culo (cadena de texto: "Carro" o "Moto")
ÔÇß	Hora de entrada (hora en formato HH:MM)
ÔÇß	Hora de salida (hora en formato HH:MM, si ya ha salido)
o	Utiliza tuplas para almacenar los datos inmutables del veh√≠culo (como la placa y el tipo de veh√≠culo).
2.	Funcionalidades:
o	Registro de veh√≠culos:

ÔÇß	Al ingresar un veh√≠culo, el sistema debe pedir la placa, el tipo de veh√≠culo (carro o moto) y la hora de entrada.
ÔÇß	El veh√≠culo debe ser a√±adido a la lista de veh√≠culos estacionados y asignado a un espacio disponible.
o	Registro de salida:
ÔÇß	Al registrar la salida de un veh√≠culo, el sistema debe pedir la placa y la hora de salida.
ÔÇß	El veh√≠culo debe ser removido de la lista de estacionados y el sistema debe calcular el tiempo que estuvo estacionado (diferencia entre la hora de entrada y salida).
o	Visualizaci√≥n de veh√≠culos estacionados:
ÔÇß	El sistema debe permitir visualizar todos los veh√≠culos actualmente estacionados, mostrando su placa, tipo de veh√≠culo, hora de entrada y hora de salida (si ya ha salido).
o	Control de capacidad:
ÔÇß	El parqueadero tiene una capacidad m√°xima de veh√≠culos (carros y motos). Si el parqueadero est√° lleno, el sistema debe mostrar el mensaje: "PARQUEADERO LLENO".
o	Verificaci√≥n de disponibilidad de espacio:
ÔÇß	El sistema debe comprobar si hay espacios disponibles antes de permitir el ingreso de un veh√≠culo.
3.	Requisitos Adicionales:
o	Validaciones:
ÔÇß	No se debe permitir que un veh√≠culo se registre si ya est√° estacionado.
ÔÇß	No se debe permitir el registro de salida de un veh√≠culo que no est√© estacionado.
ÔÇß	No se puede permitir el ingreso de un veh√≠culo si no hay espacio disponible en el parqueadero.
o	C√°lculo de tarifas:
ÔÇß	Implementa un sistema de tarifas por hora, donde el costo de la estancia de un veh√≠culo se calcule seg√∫n su tipo (carro o moto) y el tiempo que estuvo estacionado.
o	Informe de actividades (Opcional):

ÔÇß	Desarrolla una funcionalidad que permita generar un informe detallado de las actividades del parqueadero. Este informe debe mostrar la informaci√≥n relevante, como veh√≠culos registrados, tiempos de estancia, tarifas cobradas, entre otros.

Consideraciones:

‚Ä¢	El sistema debe ser flexible y f√°cil de mantener.
‚Ä¢	Aseg√∫rese de realizar pruebas adecuadas para verificar que todas las funcionalidades est√©n implementadas correctamente.

Este proyecto les brindar√° la oportunidad de aplicar los conceptos aprendidos en el curso, al mismo tiempo que desarrollan una soluci√≥n pr√°ctica y funcional


pseudocodigo del proyecto:

üîß Inicializaci√≥n
Definir lista veh√≠culos_estacionados = []
Definir capacidad_maxima = n√∫mero m√°ximo de veh√≠culos permitidos
Definir tarifas = {"Carro": tarifa_por_hora_carro, "Moto": tarifa_por_hora_moto}

üöó Funci√≥n: registrar_entrada()
Solicitar placa
Solicitar tipo de veh√≠culo ("Carro" o "Moto")
Solicitar hora de entrada (formato HH:MM)

Si veh√≠culo ya est√° en veh√≠culos_estacionados:
    Mostrar "El veh√≠culo ya est√° registrado"
    Salir

Si len(veh√≠culos_estacionados) >= capacidad_maxima:
    Mostrar "PARQUEADERO LLENO"
    Salir

Crear tupla datos_inmutables = (placa, tipo)
Crear diccionario vehiculo = {
    "placa": placa,
    "tipo": tipo,
    "hora_entrada": hora_entrada,
    "hora_salida": None
}

Agregar vehiculo a veh√≠culos_estacionados
Mostrar "Veh√≠culo registrado exitosamente"



üïí Funci√≥n: registrar_salida()
Solicitar placa
Solicitar hora de salida (formato HH:MM)

Buscar veh√≠culo en veh√≠culos_estacionados por placa

Si no se encuentra:
    Mostrar "El veh√≠culo no est√° registrado"
    Salir

Actualizar hora_salida en el diccionario del veh√≠culo

Calcular tiempo_estacionado = hora_salida - hora_entrada
Calcular tarifa = tiempo_estacionado * tarifas[tipo]

Mostrar tiempo_estacionado y tarifa

Eliminar veh√≠culo de veh√≠culos_estacionados
Mostrar "Salida registrada exitosamente"



üìã Funci√≥n: mostrar_veh√≠culos_estacionados()
Si veh√≠culos_estacionados est√° vac√≠o:
    Mostrar "No hay veh√≠culos estacionados"
    Salir

Para cada veh√≠culo en veh√≠culos_estacionados:
    Mostrar placa, tipo, hora_entrada, hora_salida


üì¶ Funci√≥n: verificar_disponibilidad()
Si len(veh√≠culos_estacionados) < capacidad_maxima:
    Mostrar "Espacio disponible"
    Retornar True
Sino:
    Mostrar "PARQUEADERO LLENO"
    Retornar False


POO

üß≠ Ruta para desarrollar el proyecto con POO
1. Dise√±o de Clases
Define las clases principales que representar√°n los elementos del sistema:

üîπ Vehiculo
Atributos:
placa (str)
tipo (str: "Carro" o "Moto")
hora_entrada (datetime)
hora_salida (datetime o None)
M√©todos:
calcular_tiempo_estacionado()
calcular_tarifa(tarifas)
üîπ Parqueadero
Atributos:
capacidad_maxima (int)
vehiculos_estacionados (list de objetos Vehiculo)
tarifas (dict: {"Carro": valor, "Moto": valor})
M√©todos:
registrar_entrada(placa, tipo, hora)
registrar_salida(placa, hora)
mostrar_vehiculos()
verificar_disponibilidad()


2. Validaciones
Implementa validaciones dentro de los m√©todos:

Verificar si el veh√≠culo ya est√° registrado.
Verificar si hay espacio disponible.
Verificar si el veh√≠culo existe al registrar salida.

3. Interfaz de Usuario (CLI)
Crea un men√∫ interactivo en consola para que el usuario pueda:

Registrar entrada
Registrar salida
Ver veh√≠culos estacionados
Ver disponibilidad
Salir del programa
4. Manejo de Fechas y Horas
Usa el m√≥dulo datetime para convertir cadenas en objetos de hora y calcular diferencias.

5. Buenas Pr√°cticas
Usa nombres de clases en PascalCase (Vehiculo, Parqueadero)
Usa nombres de m√©todos y variables en snake_case (registrar_entrada, hora_salida)
Documenta tus clases y m√©todos con docstrings
Maneja errores con try-except donde sea necesario
Separa tu c√≥digo en m√≥dulos si crece mucho (por ejemplo, vehiculo.py, parqueadero.py, main.py)
6. Pruebas
Haz pruebas unitarias simples para verificar:

Registro correcto
C√°lculo de tarifas
Validaciones

'''
from datetime import datetime
from Parqueadero import Parqueadero

def main():
    capacidad_maxima = 5
    tarifas = {"Carro": 2000, "Moto": 1000}
    parqueadero = Parqueadero(capacidad_maxima, tarifas)

    while True:
        print("\nMen√∫:")
        print("1. Registrar entrada")
        print("2. Registrar salida y generar cobro")
        print("3. Mostrar veh√≠culos estacionados")
        print("4. Verificar disponibilidad")
        print("5. Salir")

        opcion = input("Seleccione una opci√≥n: ")

        if opcion == "1":
            placa = input("Ingrese la placa del veh√≠culo: ")
            tipo = input("Ingrese el tipo de veh√≠culo (Carro/Moto): ")
            hora_entrada_str = input("Ingrese la hora de entrada (HH:MM): ")
            hora_entrada = datetime.strptime(hora_entrada_str, "%H:%M")
            parqueadero.registrar_entrada(placa, tipo, hora_entrada)

        elif opcion == "2":
            placa = input("Ingrese la placa del veh√≠culo: ")
            hora_salida_str = input("Ingrese la hora de salida (HH:MM): ")
            hora_salida = datetime.strptime(hora_salida_str, "%H:%M")
            parqueadero.registrar_salida(placa, hora_salida)

        elif opcion == "3":
            parqueadero.mostrar_vehiculos()

        elif opcion == "4":
            parqueadero.verificar_disponibilidad()

        elif opcion == "5":
            print("Saliendo del programa...")
            break

        else:
            print("Opci√≥n no v√°lida, intente nuevamente.")

if __name__ == "__main__":
    main()

        

